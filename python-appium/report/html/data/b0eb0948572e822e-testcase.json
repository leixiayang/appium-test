{
  "uid" : "b0eb0948572e822e",
  "name" : "TestLogin.test_login",
  "title" : "Test login",
  "time" : {
    "start" : 1492742737020,
    "stop" : 1492742744895,
    "duration" : 7875
  },
  "summary" : {
    "attachments" : 0,
    "steps" : 1
  },
  "failure" : {
    "message" : "NotFoundElementError: ",
    "stackTrace" : "self = <base.action.ElementActions object at 0x000001C84CD4D860>\nlocator = {'name': '我的', 'type': 'test', 'value': '我的'}\nis_need_displayed = True\n\n    def _find_element(self, locator, is_need_displayed=True):\n        \"\"\"查找单个元素,如果有多个返回第一个\n    \n            Args:\n                locator: 定位器\n                is_need_displayed: 是否需要定位的元素必须展示\n    \n            Returns: 元素\n    \n            Raises: NotFoundElementError\n                    未找到元素会抛 NotFoundElementError 异常\n    \n            \"\"\"\n        if 'timeOutInSeconds' in locator:\n            wait = locator['timeOutInSeconds']\n        else:\n            wait = 20\n    \n        try:\n            if is_need_displayed:\n                WebDriverWait(self.driver, wait).until(\n>                   lambda driver: self._get_element_by_type(driver, locator).is_displayed())\n\nbase\\action.py:263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e0d93587-8dee-407d-bf83-5912afdad1db\")>\nmethod = <function ElementActions._find_element.<locals>.<lambda> at 0x000001C84CC8D378>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\nC:\\Users\\hyh\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"e0d93587-8dee-407d-bf83-5912afdad1db\")>\n\n>   lambda driver: self._get_element_by_type(driver, locator).is_displayed())\n\nbase\\action.py:263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"e0d93587-8dee-407d-bf83-5912afdad1db\")>\nlocator = {'name': '我的', 'type': 'test', 'value': '我的'}, element = True\n\n    @staticmethod\n    def _get_element_by_type(driver, locator, element=True):\n        \"\"\"通过locator定位元素(默认定位单个元素)\n    \n            Args:\n                driver:driver\n                locator:定位器\n                element:\n                    true:查找单个元素\n                    false:查找多个元素\n    \n            Returns:单个元素 或 元素list\n    \n            \"\"\"\n        value = locator['value']\n        ltype = locator['type']\n        L.i(\"[查找]元素 %s \" % locator)\n        if ltype == 'name':\n            ui_value = 'new UiSelector().textContains' + '(\\\"' + value + '\\\")'\n            return driver.find_element_by_android_uiautomator(\n                ui_value) if element else driver.find_elements_by_android_uiautomator(ui_value)\n        else:\n>           return driver.find_element(ltype, value) if element else driver.find_elements(ltype, value)\n\nbase\\action.py:316: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"e0d93587-8dee-407d-bf83-5912afdad1db\")>\nby = 'test', value = '我的'\n\n    def find_element(self, by=By.ID, value=None):\n        \"\"\"\n            'Private' method used by the find_element_by_* methods.\n    \n            :Usage:\n                Use the corresponding find_element_by_* instead of this.\n    \n            :rtype: WebElement\n            \"\"\"\n        if self.w3c:\n            if by == By.ID:\n                by = By.CSS_SELECTOR\n                value = '[id=\"%s\"]' % value\n            elif by == By.TAG_NAME:\n                by = By.CSS_SELECTOR\n            elif by == By.CLASS_NAME:\n                by = By.CSS_SELECTOR\n                value = \".%s\" % value\n            elif by == By.NAME:\n                by = By.CSS_SELECTOR\n                value = '[name=\"%s\"]' % value\n        return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n>           'value': value})['value']\n\nC:\\Users\\hyh\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:784: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"e0d93587-8dee-407d-bf83-5912afdad1db\")>\ndriver_command = 'findElement'\nparams = {'sessionId': 'e0d93587-8dee-407d-bf83-5912afdad1db', 'using': 'test', 'value': '我的'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nC:\\Users\\hyh\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:249: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000001C84D5EDF98>\nresponse = {'status': 500, 'value': '{\"status\":9,\"value\":{\"message\":\"Invalid locator strategy: test\",\"origValue\":\"Invalid locator strategy: test\"},\"sessionId\":\"e0d93587-8dee-407d-bf83-5912afdad1db\"}'}\n\n    def check_response(self, response):\n        try:\n            super(MobileErrorHandler, self).check_response(response)\n        except WebDriverException as wde:\n            if wde.msg == 'No such context found.':\n                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace)\n            else:\n>               raise wde\n\nC:\\Users\\hyh\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000001C84D5EDF98>\nresponse = {'status': 500, 'value': '{\"status\":9,\"value\":{\"message\":\"Invalid locator strategy: test\",\"origValue\":\"Invalid locator strategy: test\"},\"sessionId\":\"e0d93587-8dee-407d-bf83-5912afdad1db\"}'}\n\n    def check_response(self, response):\n        try:\n>           super(MobileErrorHandler, self).check_response(response)\n\nC:\\Users\\hyh\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000001C84D5EDF98>\nresponse = {'status': 500, 'value': '{\"status\":9,\"value\":{\"message\":\"Invalid locator strategy: test\",\"origValue\":\"Invalid locator strategy: test\"},\"sessionId\":\"e0d93587-8dee-407d-bf83-5912afdad1db\"}'}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            try:\n                                message = message['message']\n                            except TypeError:\n                                message = None\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:\n            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Invalid locator strategy: test\n\nC:\\Users\\hyh\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:193: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test.test_home.TestLogin object at 0x000001C84CC764A8>\naction = <base.action.ElementActions object at 0x000001C84CD4D860>\n\n    def test_login(self, action: ElementActions):\n        L.d('test_login')\n        account = Steps.get_account()\n        action.sleep(3)\n        # action.test_SwipeGuideImages()\n        # action.click(HomePage.登录入口)\n>       action.click(HomePage.我的)\n\ntest\\test_home.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\action.py:87: in click\n    el = self._find_element(locator)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <base.action.ElementActions object at 0x000001C84CD4D860>\nlocator = {'name': '我的', 'type': 'test', 'value': '我的'}\nis_need_displayed = True\n\n    def _find_element(self, locator, is_need_displayed=True):\n        \"\"\"查找单个元素,如果有多个返回第一个\n    \n            Args:\n                locator: 定位器\n                is_need_displayed: 是否需要定位的元素必须展示\n    \n            Returns: 元素\n    \n            Raises: NotFoundElementError\n                    未找到元素会抛 NotFoundElementError 异常\n    \n            \"\"\"\n        if 'timeOutInSeconds' in locator:\n            wait = locator['timeOutInSeconds']\n        else:\n            wait = 20\n    \n        try:\n            if is_need_displayed:\n                WebDriverWait(self.driver, wait).until(\n                    lambda driver: self._get_element_by_type(driver, locator).is_displayed())\n            else:\n                WebDriverWait(self.driver, wait).until(\n                    lambda driver: self._get_element_by_type(driver, locator) is not None)\n            return self._get_element_by_type(self.driver, locator)\n        except Exception as e:\n            L.e(\"[element] 页面中未能找到 %s 元素\" % locator)\n>           raise NotFoundElementError\nE           exception.exceptions.NotFoundElementError\n\nbase\\action.py:270: NotFoundElementError"
  },
  "description" : null,
  "severity" : "NORMAL",
  "status" : "FAILED",
  "suite" : {
    "uid" : "858cd6e9accd3103",
    "name" : "test.test_home",
    "title" : "Test home"
  },
  "steps" : [ {
    "name" : "获取账号和密码",
    "title" : "获取账号和密码",
    "time" : {
      "start" : 1492742741772,
      "stop" : 1492742741774,
      "duration" : 2
    },
    "summary" : {
      "attachments" : 0,
      "steps" : 0
    },
    "status" : "PASSED",
    "attachments" : [ ],
    "steps" : [ ]
  } ],
  "attachments" : [ ],
  "issues" : [ ],
  "testIds" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "4880-MainThread"
  }, {
    "name" : "host",
    "value" : "DESKTOP-33SMPDQ"
  }, {
    "name" : "suite-title",
    "value" : null
  }, {
    "name" : "suite-name",
    "value" : "test.test_home"
  }, {
    "name" : "severity",
    "value" : "normal"
  } ],
  "parameters" : [ ]
}